 /******************************************************************************
 *    This program is free software: you can redistribute it and/or modify     *
 *   it under the terms of the GNU General Public License as published by      *
 *   the Free Software Foundation, either version 3 of the License, or         *
 *   (at your option) any later version.                                       *
 *                                                                             *
 *   This program is distributed in the hope that it will be useful,           *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of            *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             *
 *   GNU General Public License for more details.                              *
 *                                                                             *
 *   You should have received a copy of the GNU General Public License         *
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.     *
 *                                                                             *   
 *   Authors:                                                                  *
 *      Carlos Arguelles (University of Wisconsin Madison)                     * 
 *         carguelles@icecube.wisc.edu                                         *
 *      Jordi Salvado (University of Wisconsin Madison)                        *
 *         jsalvado@icecube.wisc.edu                                           *
 *      Christopher Weaver (University of Wisconsin Madison)                   * 
 *         cweaver@icecube.wisc.edu                                            *
 ******************************************************************************/
(suv_rot) . components[0]+=suv.components[0];
(suv_rot) . components[1]+=(cos(th)*cos(th) - cos(2*del)*sin(th)*sin(th))*suv.components[1] + cos(del)*(-2*sin(del)*sin(th)*sin(th)*suv.components[6] + sin(2*th)*suv.components[7]);
(suv_rot) . components[2]+=cos(th)*suv.components[2] + sin(th)*(-(cos(del)*suv.components[8]) + sin(del)*suv.components[13]);
(suv_rot) . components[3]+=cos(th)*suv.components[3] + sin(th)*(-(cos(del)*suv.components[9]) + sin(del)*suv.components[19]);
(suv_rot) . components[4]+=cos(th)*suv.components[4] + sin(th)*(-(cos(del)*suv.components[10]) + sin(del)*suv.components[25]);
(suv_rot) . components[5]+=cos(th)*suv.components[5] + sin(th)*(-(cos(del)*suv.components[11]) + sin(del)*suv.components[31]);
(suv_rot) . components[6]+=-2*cos(del)*sin(del)*sin(th)*sin(th)*suv.components[1] + (cos(th)*cos(th) + cos(2*del)*sin(th)*sin(th))*suv.components[6] + sin(del)*sin(2*th)*suv.components[7];
(suv_rot) . components[7]+=-(sin(2*th)*(cos(del)*suv.components[1] + sin(del)*suv.components[6])) + cos(2*th)*suv.components[7];
(suv_rot) . components[8]+=cos(del)*sin(th)*suv.components[2] + cos(th)*suv.components[8] + sin(del)*sin(th)*suv.components[12];
(suv_rot) . components[9]+=cos(del)*sin(th)*suv.components[3] + cos(th)*suv.components[9] + sin(del)*sin(th)*suv.components[18];
(suv_rot) . components[10]+=cos(del)*sin(th)*suv.components[4] + cos(th)*suv.components[10] + sin(del)*sin(th)*suv.components[24];
(suv_rot) . components[11]+=cos(del)*sin(th)*suv.components[5] + cos(th)*suv.components[11] + sin(del)*sin(th)*suv.components[30];
(suv_rot) . components[12]+=cos(th)*suv.components[12] - sin(th)*(sin(del)*suv.components[8] + cos(del)*suv.components[13]);
(suv_rot) . components[13]+=-(sin(del)*sin(th)*suv.components[2]) + cos(del)*sin(th)*suv.components[12] + cos(th)*suv.components[13];
(suv_rot) . components[14]+=suv.components[14];
(suv_rot) . components[15]+=suv.components[15];
(suv_rot) . components[16]+=suv.components[16];
(suv_rot) . components[17]+=suv.components[17];
(suv_rot) . components[18]+=cos(th)*suv.components[18] - sin(th)*(sin(del)*suv.components[9] + cos(del)*suv.components[19]);
(suv_rot) . components[19]+=-(sin(del)*sin(th)*suv.components[3]) + cos(del)*sin(th)*suv.components[18] + cos(th)*suv.components[19];
(suv_rot) . components[20]+=suv.components[20];
(suv_rot) . components[21]+=suv.components[21];
(suv_rot) . components[22]+=suv.components[22];
(suv_rot) . components[23]+=suv.components[23];
(suv_rot) . components[24]+=cos(th)*suv.components[24] - sin(th)*(sin(del)*suv.components[10] + cos(del)*suv.components[25]);
(suv_rot) . components[25]+=-(sin(del)*sin(th)*suv.components[4]) + cos(del)*sin(th)*suv.components[24] + cos(th)*suv.components[25];
(suv_rot) . components[26]+=suv.components[26];
(suv_rot) . components[27]+=suv.components[27];
(suv_rot) . components[28]+=suv.components[28];
(suv_rot) . components[29]+=suv.components[29];
(suv_rot) . components[30]+=cos(th)*suv.components[30] - sin(th)*(sin(del)*suv.components[11] + cos(del)*suv.components[31]);
(suv_rot) . components[31]+=-(sin(del)*sin(th)*suv.components[5]) + cos(del)*sin(th)*suv.components[30] + cos(th)*suv.components[31];
(suv_rot) . components[32]+=suv.components[32];
(suv_rot) . components[33]+=suv.components[33];
(suv_rot) . components[34]+=suv.components[34];
(suv_rot) . components[35]+=suv.components[35];